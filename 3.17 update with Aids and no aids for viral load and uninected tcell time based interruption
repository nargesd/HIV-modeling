---
title: "HIV within host model"
output: html_document
---

This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.

When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:

The following function shows the uninfected T cell counts after HIV inection. This model does not include AIDS stage:

```{r}

library(deSolve)
require(deSolve)  #loads ODE solver package

main.program <- function(tmax,treat.init,treat.int,int.period){
#values for model parameters,
lambda=10;#unit: [/mm3 day]
d=0.01;#unit: [/day]
b=4.57e-5;#unit: [mm3/day]
delta=0.39;#unit: [/day]
p=45;#unit: [/cell day]
c=2.4;#unit: [/day]
eRTI1=0; #Reverse Transcriptise Inhibitor efficacy when patient is not getting treatment
ePI1=0; #Protease Inhibitor efficacy when patient is not getting treatment
eRTI2=0.4; #Reverse Transcriptise Inhibitor efficacy when patient is getting treatment
ePI2=0.4; #Protease Inhibitor efficacy when patient is getting treatment

no.treatment=function(t,y,parms)   
{ 
  
  U=y[1]; #uninfected cells
  I=y[2]; #infected cells
  VI=y[3]; #infectious virus
  VNI=y[4]; #Noninfectious virus
  
  dUdt=lambda-d*U-(1-eRTI1)*b*VI*U;
  dIdt=(1-eRTI1)*b*VI*U-delta*I;
  dVIdt=(1-ePI1)*p*I-c*VI;
  dVNIdt=ePI1*p*I-c*VNI;
  
  return(list(c(dUdt,dIdt,dVIdt,dVNIdt)))
}


treatment=function(t,y,parms) 
{ 
  U=y[1]; #uninfected cells
  I=y[2]; #infected cells
  VI=y[3]; #infectious virus
  VNI=y[4]; #Noninfectious virus
  
  dUdt=lambda-d*U-(1-eRTI2)*b*VI*U;
  dIdt=(1-eRTI2)*b*VI*U-delta*I;
  dVIdt=(1-ePI2)*p*I-c*VI;
  dVNIdt=ePI2*p*I-c*VNI;
  
  return(list(c(dUdt,dIdt,dVIdt,dVNIdt)))
} #end function specifying the ODEs



#############
#main program
#############
#tmax=2000
timevec=seq(0,tmax,1); #vector of times
#treat.init=700
#treat.int=800
#int.period=200
n.max=(tmax-treat.int)/int.period
seq.n = seq(0,n.max,2)


main=matrix(,nrow=tmax+1,ncol=5)
#Initial condition 

main[1,2]=1e3; #initial number of uninfected cells  
main[1,4]=1e-6;#initial number for free infectious virus V
main[1,5]=0; #initial number for free noninfectious virus v
main[1,3]=0; #initial number of infected cells 
#Y0=c(U, I, VI, VNI);  #combine initial conditions into a vector 
milestone=matrix()
t=2
for (n in 1:length(seq.n)){
  #print(n)
  while(t<treat.int+(seq.n[n]+2)*int.period & t<tmax){
    #print(t)
    if (t<treat.init) {
      if(t==1) {Y0=c(1e3,0,1e-6,0)} else {Y0=main[t-1,2:5]}
      timevec1=seq(t-1,t)
      odeoutput=lsoda(Y0,timevec1,no.treatment,parms="",atol=1e-5)
      main[t,]=odeoutput[2,]
      t=t+1
      while (t<treat.init){
        Y0=main[t-1,2:5]
        timevec1=seq(t-1,t)
        odeoutput=lsoda(Y0,timevec1,no.treatment,parms="",atol=1e-5)
        main[t,]=odeoutput[2,]
        t=t+1}}
      
    else {if ((t>=treat.init) & (t<treat.int)) {
     milestone=rbind(milestone,t)
     Y0=main[t-1,2:5]
     timevec1=seq(t-1,t)
     odeoutput=lsoda(Y0,timevec1,treatment,parms="",atol=1e-5)
     main[t,]=odeoutput[2,]
     t=t+1
     while ((t>=treat.init) & (t<treat.int)){
       Y0=main[t-1,2:5]
       timevec1=seq(t-1,t)
       odeoutput=lsoda(Y0,timevec1,treatment,parms="",atol=1e-5)
       main[t,]=odeoutput[2,]
       t=t+1}}
     
    else {if (t>=treat.int) {
      if (t< treat.int+(seq.n[n]+1)*int.period) {  
        milestone=rbind(milestone,t)
        Y0=main[t-1,2:5]
        timevec1=seq(t-1,t)
        odeoutput=lsoda(Y0,timevec1,no.treatment,parms="",atol=1e-5)
        main[t,]=odeoutput[2,]
        t=t+1
        while (t< treat.int+(seq.n[n]+1)*int.period & t<tmax){
          Y0=main[t-1,2:5]
          timevec1=seq(t-1,t)
          odeoutput=lsoda(Y0,timevec1,no.treatment,parms="",atol=1e-5)
          main[t,]=odeoutput[2,]
          t=t+1}}
      
      else { #print("i solve u")
        while ((t>= treat.int+(seq.n[n]+1)*int.period) & (t < treat.int+(seq.n[n]+2)*int.period & t<tmax)){
        #print("*")
        #print(t)
        Y0=main[t-1,2:5]
        timevec1=seq(t-1,t)
        odeoutput=lsoda(Y0,timevec1,treatment,parms="",atol=1e-5)
        main[t,]=odeoutput[2,]
        t=t+1}}
        }}
      }}
#print("out of bond")
}

a.plot <- plot(main[,2],type="l",xlab="time (days)",ylab="Cell per microliter",main=paste("Uninfected cells with interruption period:",int.period,"day(s)","and treatment starts in day",treat.init,"\n and first interruption happens after 100 days of starting treatment, without AIDS stage"), cex.main=0.6,col=int.period+1,lwd=2,xlim=c(0,tmax),ylim=c(0,1e3))


b.plot <- abline(v=treat.init,lty=c(2))


#c.plot <- abline(v=seq(treat.int,tmax,int.period),lty=c(2))


d.plot <- for (n in 1: length(seq.n)) { 
  rect(treat.int+(seq.n[n])*int.period,-100,treat.int+(seq.n[n]+1)*int.period,1200,col = rgb(0.5,0.5,0.5,1/4),border=NA)}


return(list(a.plot))
}
```

Vial load changes over time with treatment itnerruption(No AIDS stage)

```{r}
main.program.viral <- function(tmax,treat.init,treat.int,int.period){
#values for model parameters,
lambda=10;#unit: [/mm3 day]
d=0.01;#unit: [/day]
b=4.57e-5;#unit: [mm3/day]
delta=0.39;#unit: [/day]
p=45;#unit: [/cell day]
c=2.4;#unit: [/day]
eRTI1=0; #Reverse Transcriptise Inhibitor efficacy when patient is not getting treatment
ePI1=0; #Protease Inhibitor efficacy when patient is not getting treatment
eRTI2=0.4; #Reverse Transcriptise Inhibitor efficacy when patient is getting treatment
ePI2=0.4; #Protease Inhibitor efficacy when patient is getting treatment

no.treatment=function(t,y,parms)   
{ 
  
  U=y[1]; #uninfected cells
  I=y[2]; #infected cells
  VI=y[3]; #infectious virus
  VNI=y[4]; #Noninfectious virus
  
  dUdt=lambda-d*U-(1-eRTI1)*b*VI*U;
  dIdt=(1-eRTI1)*b*VI*U-delta*I;
  dVIdt=(1-ePI1)*p*I-c*VI;
  dVNIdt=ePI1*p*I-c*VNI;
  
  return(list(c(dUdt,dIdt,dVIdt,dVNIdt)))
}


treatment=function(t,y,parms) 
{ 
  U=y[1]; #uninfected cells
  I=y[2]; #infected cells
  VI=y[3]; #infectious virus
  VNI=y[4]; #Noninfectious virus
  
  dUdt=lambda-d*U-(1-eRTI2)*b*VI*U;
  dIdt=(1-eRTI2)*b*VI*U-delta*I;
  dVIdt=(1-ePI2)*p*I-c*VI;
  dVNIdt=ePI2*p*I-c*VNI;
  
  return(list(c(dUdt,dIdt,dVIdt,dVNIdt)))
} #end function specifying the ODEs



#############
#main program
#############
#tmax=2000
timevec=seq(0,tmax,1); #vector of times
#treat.init=700
#treat.int=800
#int.period=200
n.max=(tmax-treat.int)/int.period
seq.n = seq(0,n.max,2)


main=matrix(,nrow=tmax+1,ncol=5)
#Initial condition 

main[1,2]=1e3; #initial number of uninfected cells  
main[1,4]=1e-6;#initial number for free infectious virus V
main[1,5]=0; #initial number for free noninfectious virus v
main[1,3]=0; #initial number of infected cells 
#Y0=c(U, I, VI, VNI);  #combine initial conditions into a vector 
milestone=matrix()
t=2
for (n in 1:length(seq.n)){
  #print(n)
  while(t<treat.int+(seq.n[n]+2)*int.period & t<tmax){
    #print(t)
    if (t<treat.init) {
      if(t==1) {Y0=c(1e3,0,1e-6,0)} else {Y0=main[t-1,2:5]}
      timevec1=seq(t-1,t)
      odeoutput=lsoda(Y0,timevec1,no.treatment,parms="",atol=1e-5)
      main[t,]=odeoutput[2,]
      t=t+1
      while (t<treat.init){
        Y0=main[t-1,2:5]
        timevec1=seq(t-1,t)
        odeoutput=lsoda(Y0,timevec1,no.treatment,parms="",atol=1e-5)
        main[t,]=odeoutput[2,]
        t=t+1}}
      
    else {if ((t>=treat.init) & (t<treat.int)) {
     milestone=rbind(milestone,t)
     Y0=main[t-1,2:5]
     timevec1=seq(t-1,t)
     odeoutput=lsoda(Y0,timevec1,treatment,parms="",atol=1e-5)
     main[t,]=odeoutput[2,]
     t=t+1
     while ((t>=treat.init) & (t<treat.int)){
       Y0=main[t-1,2:5]
       timevec1=seq(t-1,t)
       odeoutput=lsoda(Y0,timevec1,treatment,parms="",atol=1e-5)
       main[t,]=odeoutput[2,]
       t=t+1}}
     
    else {if (t>=treat.int) {
      if (t< treat.int+(seq.n[n]+1)*int.period) {  
        milestone=rbind(milestone,t)
        Y0=main[t-1,2:5]
        timevec1=seq(t-1,t)
        odeoutput=lsoda(Y0,timevec1,no.treatment,parms="",atol=1e-5)
        main[t,]=odeoutput[2,]
        t=t+1
        while (t< treat.int+(seq.n[n]+1)*int.period & t<tmax){
          Y0=main[t-1,2:5]
          timevec1=seq(t-1,t)
          odeoutput=lsoda(Y0,timevec1,no.treatment,parms="",atol=1e-5)
          main[t,]=odeoutput[2,]
          t=t+1}}
      
      else { #print("i solve u")
        while ((t>= treat.int+(seq.n[n]+1)*int.period) & (t < treat.int+(seq.n[n]+2)*int.period & t<tmax)){
        #print("*")
        #print(t)
        Y0=main[t-1,2:5]
        timevec1=seq(t-1,t)
        odeoutput=lsoda(Y0,timevec1,treatment,parms="",atol=1e-5)
        main[t,]=odeoutput[2,]
        t=t+1}}
        }}
      }}
#print("out of bond")
}

a.plot <- plot(main[,4]*1000,type="l",xlab="time (days)",ylab="virus per ml",main=paste("Viral loads with interruption period:",int.period,"day(s)","and treatment starts in day",treat.init,"\n and first interruption happens after 100 days of starting treatment, without AIDS stage"), cex.main=0.6, col=int.period+3,lwd=2,xlim=c(0,tmax),log="y")



b.plot <- abline(v=treat.init,lty=c(2))


#c.plot <- abline(v=seq(treat.int,tmax,int.period),lty=c(2))


d.plot <- for (n in 1: length(seq.n)) { 
  rect(treat.int+(seq.n[n])*int.period,1e-20,treat.int+(seq.n[n]+1)*int.period,1e8,col = rgb(0.5,0.5,0.5,1/4),border=NA)}


return(list(a.plot,d.plot))
}

```

```{r}
#par(mfrow=c(1,2))
int.period.vec=c(1,2,7,30)
treat.init.vec=c(60,600,1000)
for (i in 1:length(treat.init.vec)){
    for (n in 1:length(int.period.vec)) {
  main.program(2000,treat.init.vec[i],treat.init.vec[i]+100,int.period.vec[n])
  main.program.viral(2000,treat.init.vec[i],treat.init.vec[i]+100,int.period.vec[n])
}}
```

The following model, adds the AIDS stage to the previous model by adding the impact of Macrophages

```{r}
main.program.AIDS <- function(tmax,treat.init,treat.int,int.period){
#values for model parameters,
  
  #values for model parameters,
  lambda=10;#unit: [/mm3 day]
  d=0.01;#unit: [/day]
  b=4.57e-5;#unit: [mm3/day]
  delta=0.4;#unit: [/day]
  p=38;#unit: [/cell day]
  c=2.4;#unit: [/day]
  r=0.01
  CaT=  300
  
  lambdaM=0.15
  dM=1e-3
  bM=4.33e-8
  deltaM=1e-3
  pM=35
  rM=0.003
  CaM=  220
  eRTI1=0; #Reverse Transcriptise Inhibitor efficacy when patient is not getting treatment
  ePI1=0; #Protease Inhibitor efficacy when patient is not getting treatment
  eRTI2=0.4; #Reverse Transcriptise Inhibitor efficacy when patient is getting treatment
  ePI2=0.4; #Protease Inhibitor efficacy when patient is getting treatment
  f=0.34

no.treatment=function(t,y,parms)   
{ 
  
  U=y[1]; #uninfected cells
  I=y[2]; #infected cells
  M=y[3]
  MI=y[4]
  VI=y[5]; #infectious virus
  
    dUdt=lambda-d*U-(1-eRTI1)*b*VI*U + r*VI*U/(CaT+VI);
    dIdt=(1-eRTI1)*b*VI*U-delta*I;
    dMdt= lambdaM-dM*M-(1-eRTI1)*bM*VI*M + rM*VI*M/(CaM+VI)
    dMIdt=(1-eRTI1)*bM*VI*M-deltaM*MI;
    dVIdt=(1-ePI1)*p*I + (1-ePI1)*pM*MI - c*VI;
  
  return(list(c(dUdt,dIdt,dMdt,dMIdt,dVIdt)))
}


treatment=function(t,y,parms) 
{ 
  U=y[1]; #uninfected cells
  I=y[2]; #infected cells
  M=y[3]
  MI=y[4]
  VI=y[5]; #infectious virus
  
  dUdt=lambda-d*U-(1-eRTI2)*b*VI*U + r*VI*U/(CaT+VI);
  dIdt=(1-eRTI2)*b*VI*U-delta*I;
  dMdt= lambdaM-dM*M-(1-f*eRTI2)*bM*VI*M + rM*VI*M/(CaM+VI)
  dMIdt=(1-f*eRTI2)*bM*VI*M-deltaM*MI;
  dVIdt=(1-ePI2)*p*I + (1-f*ePI2)*pM*MI - c*VI;
  
  return(list(c(dUdt,dIdt,dMdt,dMIdt,dVIdt)))
} #end function specifying the ODEs



#############
#main program
#############
#tmax=2000
timevec=seq(0,tmax,1); #vector of times
#treat.init=700
#treat.int=800
#int.period=200
n.max=(tmax-treat.int)/int.period
seq.n = seq(0,n.max,2)


main=matrix(,nrow=tmax+1,ncol=6)
#Initial condition 


main[1,2]=1e3; #initial number of uninfected cells  
main[1,3]=0;#initial number for free infectious virus V
main[1,4]=150; #initial number for free noninfectious virus v
main[1,5]=0; #initial number of infected cells 
main[1,6]=1e-2; #initial number of infected cells 
#Y0=c(U, I, VI, VNI);  #combine initial conditions into a vector 
milestone=matrix()
t=2
for (n in 1:length(seq.n)){
  #print(n)
  while(t<treat.int+(seq.n[n]+2)*int.period & t<tmax){
    #print(t)
    if (t<treat.init) {
      if(t==1) {Y0=c(1e3,0,150,0,1e-2)} else {Y0=main[t-1,2:6]}
      timevec1=seq(t-1,t)
      odeoutput=lsoda(Y0,timevec1,no.treatment,parms="",atol=1e-5)
      main[t,]=odeoutput[2,]
      t=t+1
      while (t<treat.init){
        Y0=main[t-1,2:6]
        timevec1=seq(t-1,t)
        odeoutput=lsoda(Y0,timevec1,no.treatment,parms="",atol=1e-5)
        main[t,]=odeoutput[2,]
        t=t+1}}
      
    else {if ((t>=treat.init) & (t<treat.int)) {
     milestone=rbind(milestone,t)
     Y0=main[t-1,2:6]
     timevec1=seq(t-1,t)
     odeoutput=lsoda(Y0,timevec1,treatment,parms="",atol=1e-5)
     main[t,]=odeoutput[2,]
     t=t+1
     while ((t>=treat.init) & (t<treat.int)){
       Y0=main[t-1,2:6]
       timevec1=seq(t-1,t)
       odeoutput=lsoda(Y0,timevec1,treatment,parms="",atol=1e-5)
       main[t,]=odeoutput[2,]
       t=t+1}}
     
    else {if (t>=treat.int) {
      if (t< treat.int+(seq.n[n]+1)*int.period) {  
        milestone=rbind(milestone,t)
        Y0=main[t-1,2:6]
        timevec1=seq(t-1,t)
        odeoutput=lsoda(Y0,timevec1,no.treatment,parms="",atol=1e-5)
        main[t,]=odeoutput[2,]
        t=t+1
        while (t< treat.int+(seq.n[n]+1)*int.period & t<tmax){
          Y0=main[t-1,2:6]
          timevec1=seq(t-1,t)
          odeoutput=lsoda(Y0,timevec1,no.treatment,parms="",atol=1e-5)
          main[t,]=odeoutput[2,]
          t=t+1}}
      
      else { #print("i solve u")
        while ((t>= treat.int+(seq.n[n]+1)*int.period) & (t < treat.int+(seq.n[n]+2)*int.period & t<tmax)){
        #print("*")
        #print(t)
        Y0=main[t-1,2:6]
        timevec1=seq(t-1,t)
        odeoutput=lsoda(Y0,timevec1,treatment,parms="",atol=1e-5)
        main[t,]=odeoutput[2,]
        t=t+1}}
        }}
      }}
#print("out of bond")
}

a.plot <- plot(main[,2],type="l",xlab="time (days)",ylab="Cell per microliter",main=paste("Uninfected cells with interruption period:",int.period,"day(s)","and treatment starts in day",treat.init,"\n and first interruption happens after 100 days of starting treatment, with AIDS stage"), cex.main=0.6,col=int.period+1,lwd=2,xlim=c(0,tmax),ylim=c(0,1e3))


b.plot <- abline(v=treat.init,lty=c(2))


#c.plot <- abline(v=seq(treat.int,tmax,int.period),lty=c(2))

d.plot <- for (n in 1: length(seq.n)) { 
  rect(treat.int+(seq.n[n])*int.period,-100,treat.int+(seq.n[n]+1)*int.period,1200,col = rgb(0.5,0.5,0.5,1/4),border=NA)}


return(list(a.plot))
}


```
Viral load changes oer time wih treatment interruption (Including AIDS stage)

```{r}

main.program.AIDS.viral <- function(tmax,treat.init,treat.int,int.period){
#values for model parameters,
  
  #values for model parameters,
  lambda=10;#unit: [/mm3 day]
  d=0.01;#unit: [/day]
  b=4.57e-5;#unit: [mm3/day]
  delta=0.4;#unit: [/day]
  p=38;#unit: [/cell day]
  c=2.4;#unit: [/day]
  r=0.01
  CaT=  300
  
  lambdaM=0.15
  dM=1e-3
  bM=4.33e-8
  deltaM=1e-3
  pM=35
  rM=0.003
  CaM=  220
  eRTI1=0; #Reverse Transcriptise Inhibitor efficacy when patient is not getting treatment
  ePI1=0; #Protease Inhibitor efficacy when patient is not getting treatment
  eRTI2=0.4; #Reverse Transcriptise Inhibitor efficacy when patient is getting treatment
  ePI2=0.4; #Protease Inhibitor efficacy when patient is getting treatment
  f=0.34

no.treatment=function(t,y,parms)   
{ 
  
  U=y[1]; #uninfected cells
  I=y[2]; #infected cells
  M=y[3]
  MI=y[4]
  VI=y[5]; #infectious virus
  
    dUdt=lambda-d*U-(1-eRTI1)*b*VI*U + r*VI*U/(CaT+VI);
    dIdt=(1-eRTI1)*b*VI*U-delta*I;
    dMdt= lambdaM-dM*M-(1-eRTI1)*bM*VI*M + rM*VI*M/(CaM+VI)
    dMIdt=(1-eRTI1)*bM*VI*M-deltaM*MI;
    dVIdt=(1-ePI1)*p*I + (1-ePI1)*pM*MI - c*VI;
  
  return(list(c(dUdt,dIdt,dMdt,dMIdt,dVIdt)))
}


treatment=function(t,y,parms) 
{ 
  U=y[1]; #uninfected cells
  I=y[2]; #infected cells
  M=y[3]
  MI=y[4]
  VI=y[5]; #infectious virus
  
  dUdt=lambda-d*U-(1-eRTI2)*b*VI*U + r*VI*U/(CaT+VI);
  dIdt=(1-eRTI2)*b*VI*U-delta*I;
  dMdt= lambdaM-dM*M-(1-f*eRTI2)*bM*VI*M + rM*VI*M/(CaM+VI)
  dMIdt=(1-f*eRTI2)*bM*VI*M-deltaM*MI;
  dVIdt=(1-ePI2)*p*I + (1-f*ePI2)*pM*MI - c*VI;
  
  return(list(c(dUdt,dIdt,dMdt,dMIdt,dVIdt)))
} #end function specifying the ODEs



#############
#main program
#############
#tmax=2000
timevec=seq(0,tmax,1); #vector of times
#treat.init=700
#treat.int=800
#int.period=200
n.max=(tmax-treat.int)/int.period
seq.n = seq(0,n.max,2)


main=matrix(,nrow=tmax+1,ncol=6)
#Initial condition 


main[1,2]=1e3; #initial number of uninfected cells  
main[1,3]=0;#initial number for free infectious virus V
main[1,4]=150; #initial number for free noninfectious virus v
main[1,5]=0; #initial number of infected cells 
main[1,6]=1e-2; #initial number of infected cells 
#Y0=c(U, I, VI, VNI);  #combine initial conditions into a vector 
milestone=matrix()
t=2
for (n in 1:length(seq.n)){
  #print(n)
  while(t<treat.int+(seq.n[n]+2)*int.period & t<tmax){
    #print(t)
    if (t<treat.init) {
      if(t==1) {Y0=c(1e3,0,150,0,1e-2)} else {Y0=main[t-1,2:6]}
      timevec1=seq(t-1,t)
      odeoutput=lsoda(Y0,timevec1,no.treatment,parms="",atol=1e-5)
      main[t,]=odeoutput[2,]
      t=t+1
      while (t<treat.init){
        Y0=main[t-1,2:6]
        timevec1=seq(t-1,t)
        odeoutput=lsoda(Y0,timevec1,no.treatment,parms="",atol=1e-5)
        main[t,]=odeoutput[2,]
        t=t+1}}
      
    else {if ((t>=treat.init) & (t<treat.int)) {
     milestone=rbind(milestone,t)
     Y0=main[t-1,2:6]
     timevec1=seq(t-1,t)
     odeoutput=lsoda(Y0,timevec1,treatment,parms="",atol=1e-5)
     main[t,]=odeoutput[2,]
     t=t+1
     while ((t>=treat.init) & (t<treat.int)){
       Y0=main[t-1,2:6]
       timevec1=seq(t-1,t)
       odeoutput=lsoda(Y0,timevec1,treatment,parms="",atol=1e-5)
       main[t,]=odeoutput[2,]
       t=t+1}}
     
    else {if (t>=treat.int) {
      if (t< treat.int+(seq.n[n]+1)*int.period) {  
        milestone=rbind(milestone,t)
        Y0=main[t-1,2:6]
        timevec1=seq(t-1,t)
        odeoutput=lsoda(Y0,timevec1,no.treatment,parms="",atol=1e-5)
        main[t,]=odeoutput[2,]
        t=t+1
        while (t< treat.int+(seq.n[n]+1)*int.period & t<tmax){
          Y0=main[t-1,2:6]
          timevec1=seq(t-1,t)
          odeoutput=lsoda(Y0,timevec1,no.treatment,parms="",atol=1e-5)
          main[t,]=odeoutput[2,]
          t=t+1}}
      
      else { #print("i solve u")
        while ((t>= treat.int+(seq.n[n]+1)*int.period) & (t < treat.int+(seq.n[n]+2)*int.period & t<tmax)){
        #print("*")
        #print(t)
        Y0=main[t-1,2:6]
        timevec1=seq(t-1,t)
        odeoutput=lsoda(Y0,timevec1,treatment,parms="",atol=1e-5)
        main[t,]=odeoutput[2,]
        t=t+1}}
        }}
      }}
#print("out of bond")
}

a.plot <- plot(main[,6]*1000,type="l",xlab="time (days)",ylab="virus per ml",main=paste("Viral load with interruption period:",int.period,"day(s)","and treatment starts in day",treat.init,"\n and first interruption happens after 100 days of starting treatment, with AIDS stage"), cex.main=0.6 , col=int.period+3, lwd=2,xlim=c(0,tmax),log="y")



b.plot <- abline(v=treat.init,lty=c(2))


#c.plot <- abline(v=seq(treat.int,tmax,int.period),lty=c(2))

d.plot <- for (n in 1: length(seq.n)) { 
  rect(treat.int+(seq.n[n])*int.period,1e-20,treat.int+(seq.n[n]+1)*int.period,1e8,col = rgb(0.5,0.5,0.5,1/4),border=NA)}


return(list(a.plot))
}

```


```{r}
int.period.vec=c(1,2,7,30)
treat.init.vec=c(60,600,1000)
for (i in 1:length(treat.init.vec)){
    for (n in 1:length(int.period.vec)) {
  main.program.AIDS(2000,treat.init.vec[i],treat.init.vec[i]+100,int.period.vec[n])
  main.program.AIDS.viral(2000,treat.init.vec[i],treat.init.vec[i]+100,int.period.vec[n])

  
}}
```
The following shows the changes in the viral load in case of treatment interruption (No AIDS stage)
```{r}

```

```{r, echo=FALSE}
```

Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
